/*
 * This file is generated by jOOQ.
 */
package com.example.boot.data.database.jooq.tables;


import com.example.boot.data.database.jooq.Keys;
import com.example.boot.data.database.jooq.PhysicalExaminationSystem;
import com.example.boot.data.database.jooq.tables.records.FileDetailRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 文件记录表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileDetail extends TableImpl<FileDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>physical_examination_system.file_detail</code>
     */
    public static final FileDetail FILE_DETAIL = new FileDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileDetailRecord> getRecordType() {
        return FileDetailRecord.class;
    }

    /**
     * The column <code>physical_examination_system.file_detail.id</code>. 文件id
     */
    public final TableField<FileDetailRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "文件id");

    /**
     * The column <code>physical_examination_system.file_detail.url</code>. 文件访问地址
     */
    public final TableField<FileDetailRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(256).nullable(false), this, "文件访问地址");

    /**
     * The column <code>physical_examination_system.file_detail.size</code>. 文件大小，单位字节
     */
    public final TableField<FileDetailRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT, this, "文件大小，单位字节");

    /**
     * The column <code>physical_examination_system.file_detail.filename</code>. 文件名称
     */
    public final TableField<FileDetailRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR(256), this, "文件名称");

    /**
     * The column <code>physical_examination_system.file_detail.original_filename</code>. 原始文件名
     */
    public final TableField<FileDetailRecord, String> ORIGINAL_FILENAME = createField(DSL.name("original_filename"), SQLDataType.VARCHAR(256), this, "原始文件名");

    /**
     * The column <code>physical_examination_system.file_detail.base_path</code>. 基础存储路径
     */
    public final TableField<FileDetailRecord, String> BASE_PATH = createField(DSL.name("base_path"), SQLDataType.VARCHAR(256), this, "基础存储路径");

    /**
     * The column <code>physical_examination_system.file_detail.path</code>. 存储路径
     */
    public final TableField<FileDetailRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(256), this, "存储路径");

    /**
     * The column <code>physical_examination_system.file_detail.ext</code>. 文件扩展名
     */
    public final TableField<FileDetailRecord, String> EXT = createField(DSL.name("ext"), SQLDataType.VARCHAR(32), this, "文件扩展名");

    /**
     * The column <code>physical_examination_system.file_detail.platform</code>. 存储平台
     */
    public final TableField<FileDetailRecord, String> PLATFORM = createField(DSL.name("platform"), SQLDataType.VARCHAR(32), this, "存储平台");

    /**
     * The column <code>physical_examination_system.file_detail.th_url</code>. 缩略图访问路径
     */
    public final TableField<FileDetailRecord, String> TH_URL = createField(DSL.name("th_url"), SQLDataType.VARCHAR(256), this, "缩略图访问路径");

    /**
     * The column <code>physical_examination_system.file_detail.th_filename</code>. 缩略图名称
     */
    public final TableField<FileDetailRecord, String> TH_FILENAME = createField(DSL.name("th_filename"), SQLDataType.VARCHAR(256), this, "缩略图名称");

    /**
     * The column <code>physical_examination_system.file_detail.th_size</code>. 缩略图大小，单位字节
     */
    public final TableField<FileDetailRecord, Long> TH_SIZE = createField(DSL.name("th_size"), SQLDataType.BIGINT, this, "缩略图大小，单位字节");

    /**
     * The column <code>physical_examination_system.file_detail.object_id</code>. 文件所属对象id
     */
    public final TableField<FileDetailRecord, String> OBJECT_ID = createField(DSL.name("object_id"), SQLDataType.VARCHAR(32), this, "文件所属对象id");

    /**
     * The column <code>physical_examination_system.file_detail.object_type</code>. 文件所属对象类型，例如用户头像，评价图片
     */
    public final TableField<FileDetailRecord, String> OBJECT_TYPE = createField(DSL.name("object_type"), SQLDataType.VARCHAR(32), this, "文件所属对象类型，例如用户头像，评价图片");

    /**
     * The column <code>physical_examination_system.file_detail.create_time</code>. 创建时间
     */
    public final TableField<FileDetailRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "创建时间");

    private FileDetail(Name alias, Table<FileDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileDetail(Name alias, Table<FileDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("文件记录表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>physical_examination_system.file_detail</code> table reference
     */
    public FileDetail(String alias) {
        this(DSL.name(alias), FILE_DETAIL);
    }

    /**
     * Create an aliased <code>physical_examination_system.file_detail</code> table reference
     */
    public FileDetail(Name alias) {
        this(alias, FILE_DETAIL);
    }

    /**
     * Create a <code>physical_examination_system.file_detail</code> table reference
     */
    public FileDetail() {
        this(DSL.name("file_detail"), null);
    }

    public <O extends Record> FileDetail(Table<O> child, ForeignKey<O, FileDetailRecord> key) {
        super(child, key, FILE_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return PhysicalExaminationSystem.PHYSICAL_EXAMINATION_SYSTEM;
    }

    @Override
    public Identity<FileDetailRecord, UInteger> getIdentity() {
        return (Identity<FileDetailRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<FileDetailRecord> getPrimaryKey() {
        return Keys.KEY_FILE_DETAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<FileDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<FileDetailRecord>>asList(Keys.KEY_FILE_DETAIL_PRIMARY);
    }

    @Override
    public FileDetail as(String alias) {
        return new FileDetail(DSL.name(alias), this);
    }

    @Override
    public FileDetail as(Name alias) {
        return new FileDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileDetail rename(String name) {
        return new FileDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileDetail rename(Name name) {
        return new FileDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<UInteger, String, Long, String, String, String, String, String, String, String, String, Long, String, String, LocalDateTime> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
