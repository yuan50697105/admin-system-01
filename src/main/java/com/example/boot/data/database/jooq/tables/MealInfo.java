/*
 * This file is generated by jOOQ.
 */
package com.example.boot.data.database.jooq.tables;


import com.example.boot.data.database.jooq.Keys;
import com.example.boot.data.database.jooq.PhysicalExaminationSystem;
import com.example.boot.data.database.jooq.tables.records.MealInfoRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MealInfo extends TableImpl<MealInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>physical_examination_system.meal_info</code>
     */
    public static final MealInfo MEAL_INFO = new MealInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MealInfoRecord> getRecordType() {
        return MealInfoRecord.class;
    }

    /**
     * The column <code>physical_examination_system.meal_info.id</code>.
     */
    public final TableField<MealInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.code</code>.
     */
    public final TableField<MealInfoRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.created_by</code>.
     */
    public final TableField<MealInfoRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.created_date</code>.
     */
    public final TableField<MealInfoRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.discount_rate</code>.
     */
    public final TableField<MealInfoRecord, BigDecimal> DISCOUNT_RATE = createField(DSL.name("discount_rate"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.discount_total_price</code>.
     */
    public final TableField<MealInfoRecord, BigDecimal> DISCOUNT_TOTAL_PRICE = createField(DSL.name("discount_total_price"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.is_deleted</code>.
     */
    public final TableField<MealInfoRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>physical_examination_system.meal_info.modified_by</code>.
     */
    public final TableField<MealInfoRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.modified_date</code>.
     */
    public final TableField<MealInfoRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.name</code>.
     */
    public final TableField<MealInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.total_price</code>.
     */
    public final TableField<MealInfoRecord, BigDecimal> TOTAL_PRICE = createField(DSL.name("total_price"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column <code>physical_examination_system.meal_info.type</code>.
     */
    public final TableField<MealInfoRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    private MealInfo(Name alias, Table<MealInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private MealInfo(Name alias, Table<MealInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>physical_examination_system.meal_info</code> table reference
     */
    public MealInfo(String alias) {
        this(DSL.name(alias), MEAL_INFO);
    }

    /**
     * Create an aliased <code>physical_examination_system.meal_info</code> table reference
     */
    public MealInfo(Name alias) {
        this(alias, MEAL_INFO);
    }

    /**
     * Create a <code>physical_examination_system.meal_info</code> table reference
     */
    public MealInfo() {
        this(DSL.name("meal_info"), null);
    }

    public <O extends Record> MealInfo(Table<O> child, ForeignKey<O, MealInfoRecord> key) {
        super(child, key, MEAL_INFO);
    }

    @Override
    public Schema getSchema() {
        return PhysicalExaminationSystem.PHYSICAL_EXAMINATION_SYSTEM;
    }

    @Override
    public UniqueKey<MealInfoRecord> getPrimaryKey() {
        return Keys.KEY_MEAL_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<MealInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<MealInfoRecord>>asList(Keys.KEY_MEAL_INFO_PRIMARY);
    }

    @Override
    public MealInfo as(String alias) {
        return new MealInfo(DSL.name(alias), this);
    }

    @Override
    public MealInfo as(Name alias) {
        return new MealInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MealInfo rename(String name) {
        return new MealInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MealInfo rename(Name name) {
        return new MealInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, String, LocalDateTime, BigDecimal, BigDecimal, Integer, String, LocalDateTime, String, BigDecimal, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
