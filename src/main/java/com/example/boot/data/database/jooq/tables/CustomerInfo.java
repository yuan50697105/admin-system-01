/*
 * This file is generated by jOOQ.
 */
package com.example.boot.data.database.jooq.tables;


import com.example.boot.data.database.jooq.Keys;
import com.example.boot.data.database.jooq.PhysicalExaminationSystem;
import com.example.boot.data.database.jooq.tables.records.CustomerInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 客户信息
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomerInfo extends TableImpl<CustomerInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>physical_examination_system.customer_info</code>
     */
    public static final CustomerInfo CUSTOMER_INFO = new CustomerInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerInfoRecord> getRecordType() {
        return CustomerInfoRecord.class;
    }

    /**
     * The column <code>physical_examination_system.customer_info.id</code>. id
     */
    public final TableField<CustomerInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "id");

    /**
     * The column <code>physical_examination_system.customer_info.created_date</code>. createdDate
     */
    public final TableField<CustomerInfoRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("1000-01-01 00:00:00", SQLDataType.LOCALDATETIME)), this, "createdDate");

    /**
     * The column <code>physical_examination_system.customer_info.modified_date</code>. modifiedDate
     */
    public final TableField<CustomerInfoRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("1000-01-01 00:00:00", SQLDataType.LOCALDATETIME)), this, "modifiedDate");

    /**
     * The column <code>physical_examination_system.customer_info.created_by</code>. createdBy
     */
    public final TableField<CustomerInfoRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "createdBy");

    /**
     * The column <code>physical_examination_system.customer_info.modified_by</code>. modifiedBy
     */
    public final TableField<CustomerInfoRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "modifiedBy");

    /**
     * The column <code>physical_examination_system.customer_info.is_deleted</code>. isDeleted
     */
    public final TableField<CustomerInfoRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER.defaultValue(DSL.inline("-1", SQLDataType.INTEGER)), this, "isDeleted");

    /**
     * The column <code>physical_examination_system.customer_info.code</code>. 客户编号
     */
    public final TableField<CustomerInfoRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "客户编号");

    /**
     * The column <code>physical_examination_system.customer_info.name</code>. 客户名称
     */
    public final TableField<CustomerInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "客户名称");

    /**
     * The column <code>physical_examination_system.customer_info.type</code>. 客户类型
     */
    public final TableField<CustomerInfoRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "客户类型");

    /**
     * The column <code>physical_examination_system.customer_info.contact</code>. 联系人
     */
    public final TableField<CustomerInfoRecord, String> CONTACT = createField(DSL.name("contact"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "联系人");

    /**
     * The column <code>physical_examination_system.customer_info.contact_number</code>. 联系电话
     */
    public final TableField<CustomerInfoRecord, String> CONTACT_NUMBER = createField(DSL.name("contact_number"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "联系电话");

    /**
     * The column <code>physical_examination_system.customer_info.status</code>. 状态
     */
    public final TableField<CustomerInfoRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "状态");

    private CustomerInfo(Name alias, Table<CustomerInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomerInfo(Name alias, Table<CustomerInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("客户信息"), TableOptions.table());
    }

    /**
     * Create an aliased <code>physical_examination_system.customer_info</code> table reference
     */
    public CustomerInfo(String alias) {
        this(DSL.name(alias), CUSTOMER_INFO);
    }

    /**
     * Create an aliased <code>physical_examination_system.customer_info</code> table reference
     */
    public CustomerInfo(Name alias) {
        this(alias, CUSTOMER_INFO);
    }

    /**
     * Create a <code>physical_examination_system.customer_info</code> table reference
     */
    public CustomerInfo() {
        this(DSL.name("customer_info"), null);
    }

    public <O extends Record> CustomerInfo(Table<O> child, ForeignKey<O, CustomerInfoRecord> key) {
        super(child, key, CUSTOMER_INFO);
    }

    @Override
    public Schema getSchema() {
        return PhysicalExaminationSystem.PHYSICAL_EXAMINATION_SYSTEM;
    }

    @Override
    public Identity<CustomerInfoRecord, Long> getIdentity() {
        return (Identity<CustomerInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CustomerInfoRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMER_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<CustomerInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerInfoRecord>>asList(Keys.KEY_CUSTOMER_INFO_PRIMARY);
    }

    @Override
    public CustomerInfo as(String alias) {
        return new CustomerInfo(DSL.name(alias), this);
    }

    @Override
    public CustomerInfo as(Name alias) {
        return new CustomerInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerInfo rename(String name) {
        return new CustomerInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerInfo rename(Name name) {
        return new CustomerInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, LocalDateTime, LocalDateTime, String, String, Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
