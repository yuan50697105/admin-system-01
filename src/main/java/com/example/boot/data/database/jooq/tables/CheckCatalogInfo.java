/*
 * This file is generated by jOOQ.
 */
package com.example.boot.data.database.jooq.tables;


import com.example.boot.data.database.jooq.Keys;
import com.example.boot.data.database.jooq.PhysicalExaminationSystem;
import com.example.boot.data.database.jooq.tables.records.CheckCatalogInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 检查项目目录信息
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CheckCatalogInfo extends TableImpl<CheckCatalogInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>physical_examination_system.check_catalog_info</code>
     */
    public static final CheckCatalogInfo CHECK_CATALOG_INFO = new CheckCatalogInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CheckCatalogInfoRecord> getRecordType() {
        return CheckCatalogInfoRecord.class;
    }

    /**
     * The column <code>physical_examination_system.check_catalog_info.id</code>.
     */
    public final TableField<CheckCatalogInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.code</code>.
     */
    public final TableField<CheckCatalogInfoRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.created_by</code>.
     */
    public final TableField<CheckCatalogInfoRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.created_date</code>.
     */
    public final TableField<CheckCatalogInfoRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.is_deleted</code>.
     */
    public final TableField<CheckCatalogInfoRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.mode</code>.
     */
    public final TableField<CheckCatalogInfoRecord, String> MODE = createField(DSL.name("mode"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.modified_by</code>.
     */
    public final TableField<CheckCatalogInfoRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.modified_date</code>.
     */
    public final TableField<CheckCatalogInfoRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.name</code>.
     */
    public final TableField<CheckCatalogInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.position</code>.
     */
    public final TableField<CheckCatalogInfoRecord, String> POSITION = createField(DSL.name("position"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.check_catalog_info.type</code>.
     */
    public final TableField<CheckCatalogInfoRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    private CheckCatalogInfo(Name alias, Table<CheckCatalogInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private CheckCatalogInfo(Name alias, Table<CheckCatalogInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("检查项目目录信息"), TableOptions.table());
    }

    /**
     * Create an aliased <code>physical_examination_system.check_catalog_info</code> table reference
     */
    public CheckCatalogInfo(String alias) {
        this(DSL.name(alias), CHECK_CATALOG_INFO);
    }

    /**
     * Create an aliased <code>physical_examination_system.check_catalog_info</code> table reference
     */
    public CheckCatalogInfo(Name alias) {
        this(alias, CHECK_CATALOG_INFO);
    }

    /**
     * Create a <code>physical_examination_system.check_catalog_info</code> table reference
     */
    public CheckCatalogInfo() {
        this(DSL.name("check_catalog_info"), null);
    }

    public <O extends Record> CheckCatalogInfo(Table<O> child, ForeignKey<O, CheckCatalogInfoRecord> key) {
        super(child, key, CHECK_CATALOG_INFO);
    }

    @Override
    public Schema getSchema() {
        return PhysicalExaminationSystem.PHYSICAL_EXAMINATION_SYSTEM;
    }

    @Override
    public UniqueKey<CheckCatalogInfoRecord> getPrimaryKey() {
        return Keys.KEY_CHECK_CATALOG_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<CheckCatalogInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<CheckCatalogInfoRecord>>asList(Keys.KEY_CHECK_CATALOG_INFO_PRIMARY);
    }

    @Override
    public CheckCatalogInfo as(String alias) {
        return new CheckCatalogInfo(DSL.name(alias), this);
    }

    @Override
    public CheckCatalogInfo as(Name alias) {
        return new CheckCatalogInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckCatalogInfo rename(String name) {
        return new CheckCatalogInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CheckCatalogInfo rename(Name name) {
        return new CheckCatalogInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, LocalDateTime, Integer, String, String, LocalDateTime, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
