/*
 * This file is generated by jOOQ.
 */
package com.example.boot.data.database.jooq.tables;


import com.example.boot.data.database.jooq.Keys;
import com.example.boot.data.database.jooq.PhysicalExaminationSystem;
import com.example.boot.data.database.jooq.tables.records.SystemDataDictRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemDataDict extends TableImpl<SystemDataDictRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>physical_examination_system.system_data_dict</code>
     */
    public static final SystemDataDict SYSTEM_DATA_DICT = new SystemDataDict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SystemDataDictRecord> getRecordType() {
        return SystemDataDictRecord.class;
    }

    /**
     * The column <code>physical_examination_system.system_data_dict.id</code>.
     */
    public final TableField<SystemDataDictRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>physical_examination_system.system_data_dict.created_by</code>.
     */
    public final TableField<SystemDataDictRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.system_data_dict.created_date</code>.
     */
    public final TableField<SystemDataDictRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>physical_examination_system.system_data_dict.group_id</code>.
     */
    public final TableField<SystemDataDictRecord, Long> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>physical_examination_system.system_data_dict.is_deleted</code>.
     */
    public final TableField<SystemDataDictRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>physical_examination_system.system_data_dict.is_enabled</code>.
     */
    public final TableField<SystemDataDictRecord, Integer> IS_ENABLED = createField(DSL.name("is_enabled"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>physical_examination_system.system_data_dict.modified_by</code>.
     */
    public final TableField<SystemDataDictRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.system_data_dict.modified_date</code>.
     */
    public final TableField<SystemDataDictRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>physical_examination_system.system_data_dict.name</code>.
     */
    public final TableField<SystemDataDictRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.system_data_dict.value</code>.
     */
    public final TableField<SystemDataDictRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(255), this, "");

    private SystemDataDict(Name alias, Table<SystemDataDictRecord> aliased) {
        this(alias, aliased, null);
    }

    private SystemDataDict(Name alias, Table<SystemDataDictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>physical_examination_system.system_data_dict</code> table reference
     */
    public SystemDataDict(String alias) {
        this(DSL.name(alias), SYSTEM_DATA_DICT);
    }

    /**
     * Create an aliased <code>physical_examination_system.system_data_dict</code> table reference
     */
    public SystemDataDict(Name alias) {
        this(alias, SYSTEM_DATA_DICT);
    }

    /**
     * Create a <code>physical_examination_system.system_data_dict</code> table reference
     */
    public SystemDataDict() {
        this(DSL.name("system_data_dict"), null);
    }

    public <O extends Record> SystemDataDict(Table<O> child, ForeignKey<O, SystemDataDictRecord> key) {
        super(child, key, SYSTEM_DATA_DICT);
    }

    @Override
    public Schema getSchema() {
        return PhysicalExaminationSystem.PHYSICAL_EXAMINATION_SYSTEM;
    }

    @Override
    public UniqueKey<SystemDataDictRecord> getPrimaryKey() {
        return Keys.KEY_SYSTEM_DATA_DICT_PRIMARY;
    }

    @Override
    public List<UniqueKey<SystemDataDictRecord>> getKeys() {
        return Arrays.<UniqueKey<SystemDataDictRecord>>asList(Keys.KEY_SYSTEM_DATA_DICT_PRIMARY);
    }

    @Override
    public SystemDataDict as(String alias) {
        return new SystemDataDict(DSL.name(alias), this);
    }

    @Override
    public SystemDataDict as(Name alias) {
        return new SystemDataDict(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemDataDict rename(String name) {
        return new SystemDataDict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemDataDict rename(Name name) {
        return new SystemDataDict(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, LocalDateTime, Long, Integer, Integer, String, LocalDateTime, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
