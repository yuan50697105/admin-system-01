/*
 * This file is generated by jOOQ.
 */
package com.example.boot.data.database.jooq.tables;


import com.example.boot.data.database.jooq.Keys;
import com.example.boot.data.database.jooq.PhysicalExaminationSystem;
import com.example.boot.data.database.jooq.tables.records.PatientTotalConclusionInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PatientTotalConclusionInfo extends TableImpl<PatientTotalConclusionInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>physical_examination_system.patient_total_conclusion_info</code>
     */
    public static final PatientTotalConclusionInfo PATIENT_TOTAL_CONCLUSION_INFO = new PatientTotalConclusionInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientTotalConclusionInfoRecord> getRecordType() {
        return PatientTotalConclusionInfoRecord.class;
    }

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.id</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.conclusion</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, String> CONCLUSION = createField(DSL.name("conclusion"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.created_by</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.created_date</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.is_abnormal</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, Integer> IS_ABNORMAL = createField(DSL.name("is_abnormal"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.is_deleted</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.modified_by</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.modified_date</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.patient_code</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, String> PATIENT_CODE = createField(DSL.name("patient_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>physical_examination_system.patient_total_conclusion_info.patient_id</code>.
     */
    public final TableField<PatientTotalConclusionInfoRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), SQLDataType.BIGINT, this, "");

    private PatientTotalConclusionInfo(Name alias, Table<PatientTotalConclusionInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private PatientTotalConclusionInfo(Name alias, Table<PatientTotalConclusionInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>physical_examination_system.patient_total_conclusion_info</code> table reference
     */
    public PatientTotalConclusionInfo(String alias) {
        this(DSL.name(alias), PATIENT_TOTAL_CONCLUSION_INFO);
    }

    /**
     * Create an aliased <code>physical_examination_system.patient_total_conclusion_info</code> table reference
     */
    public PatientTotalConclusionInfo(Name alias) {
        this(alias, PATIENT_TOTAL_CONCLUSION_INFO);
    }

    /**
     * Create a <code>physical_examination_system.patient_total_conclusion_info</code> table reference
     */
    public PatientTotalConclusionInfo() {
        this(DSL.name("patient_total_conclusion_info"), null);
    }

    public <O extends Record> PatientTotalConclusionInfo(Table<O> child, ForeignKey<O, PatientTotalConclusionInfoRecord> key) {
        super(child, key, PATIENT_TOTAL_CONCLUSION_INFO);
    }

    @Override
    public Schema getSchema() {
        return PhysicalExaminationSystem.PHYSICAL_EXAMINATION_SYSTEM;
    }

    @Override
    public UniqueKey<PatientTotalConclusionInfoRecord> getPrimaryKey() {
        return Keys.KEY_PATIENT_TOTAL_CONCLUSION_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<PatientTotalConclusionInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<PatientTotalConclusionInfoRecord>>asList(Keys.KEY_PATIENT_TOTAL_CONCLUSION_INFO_PRIMARY);
    }

    @Override
    public PatientTotalConclusionInfo as(String alias) {
        return new PatientTotalConclusionInfo(DSL.name(alias), this);
    }

    @Override
    public PatientTotalConclusionInfo as(Name alias) {
        return new PatientTotalConclusionInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PatientTotalConclusionInfo rename(String name) {
        return new PatientTotalConclusionInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PatientTotalConclusionInfo rename(Name name) {
        return new PatientTotalConclusionInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, LocalDateTime, Integer, Integer, String, LocalDateTime, String, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
