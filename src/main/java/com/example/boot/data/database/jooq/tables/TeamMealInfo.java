/*
 * This file is generated by jOOQ.
 */
package com.example.boot.data.database.jooq.tables;


import com.example.boot.data.database.jooq.Keys;
import com.example.boot.data.database.jooq.PhysicalExaminationSystem;
import com.example.boot.data.database.jooq.tables.records.TeamMealInfoRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 团队套餐信息
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamMealInfo extends TableImpl<TeamMealInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>physical_examination_system.team_meal_info</code>
     */
    public static final TeamMealInfo TEAM_MEAL_INFO = new TeamMealInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamMealInfoRecord> getRecordType() {
        return TeamMealInfoRecord.class;
    }

    /**
     * The column <code>physical_examination_system.team_meal_info.id</code>. id
     */
    public final TableField<TeamMealInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "id");

    /**
     * The column <code>physical_examination_system.team_meal_info.created_date</code>. createdDate
     */
    public final TableField<TeamMealInfoRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("1000-01-01 00:00:00", SQLDataType.LOCALDATETIME)), this, "createdDate");

    /**
     * The column <code>physical_examination_system.team_meal_info.modified_date</code>. modifiedDate
     */
    public final TableField<TeamMealInfoRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("1000-01-01 00:00:00", SQLDataType.LOCALDATETIME)), this, "modifiedDate");

    /**
     * The column <code>physical_examination_system.team_meal_info.created_by</code>. createdBy
     */
    public final TableField<TeamMealInfoRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "createdBy");

    /**
     * The column <code>physical_examination_system.team_meal_info.modified_by</code>. modifiedBy
     */
    public final TableField<TeamMealInfoRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "modifiedBy");

    /**
     * The column <code>physical_examination_system.team_meal_info.is_deleted</code>. isDeleted
     */
    public final TableField<TeamMealInfoRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER.defaultValue(DSL.inline("-1", SQLDataType.INTEGER)), this, "isDeleted");

    /**
     * The column <code>physical_examination_system.team_meal_info.customer_id</code>. 客户ID
     */
    public final TableField<TeamMealInfoRecord, Long> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("-1", SQLDataType.BIGINT)), this, "客户ID");

    /**
     * The column <code>physical_examination_system.team_meal_info.customer_name</code>. 客户名称
     */
    public final TableField<TeamMealInfoRecord, String> CUSTOMER_NAME = createField(DSL.name("customer_name"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "客户名称");

    /**
     * The column <code>physical_examination_system.team_meal_info.team_id</code>. 团队ID
     */
    public final TableField<TeamMealInfoRecord, Long> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("-1", SQLDataType.BIGINT)), this, "团队ID");

    /**
     * The column <code>physical_examination_system.team_meal_info.code</code>. 团队编号
     */
    public final TableField<TeamMealInfoRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "团队编号");

    /**
     * The column <code>physical_examination_system.team_meal_info.name</code>. 团队名称
     */
    public final TableField<TeamMealInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "团队名称");

    /**
     * The column <code>physical_examination_system.team_meal_info.meal_id</code>. 套餐ID
     */
    public final TableField<TeamMealInfoRecord, Long> MEAL_ID = createField(DSL.name("meal_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("-1", SQLDataType.BIGINT)), this, "套餐ID");

    /**
     * The column <code>physical_examination_system.team_meal_info.meal_code</code>. 套餐编号
     */
    public final TableField<TeamMealInfoRecord, String> MEAL_CODE = createField(DSL.name("meal_code"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "套餐编号");

    /**
     * The column <code>physical_examination_system.team_meal_info.meal_name</code>. 套餐名称
     */
    public final TableField<TeamMealInfoRecord, String> MEAL_NAME = createField(DSL.name("meal_name"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "套餐名称");

    /**
     * The column <code>physical_examination_system.team_meal_info.meal_price</code>. 套餐价格
     */
    public final TableField<TeamMealInfoRecord, BigDecimal> MEAL_PRICE = createField(DSL.name("meal_price"), SQLDataType.DECIMAL(13, 4).defaultValue(DSL.inline("-1.0000", SQLDataType.DECIMAL)), this, "套餐价格");

    /**
     * The column <code>physical_examination_system.team_meal_info.meal_discount_rate</code>. 套餐折扣率
     */
    public final TableField<TeamMealInfoRecord, BigDecimal> MEAL_DISCOUNT_RATE = createField(DSL.name("meal_discount_rate"), SQLDataType.DECIMAL(13, 4).defaultValue(DSL.inline("-1.0000", SQLDataType.DECIMAL)), this, "套餐折扣率");

    /**
     * The column <code>physical_examination_system.team_meal_info.meal_discount_price</code>. 套餐折扣价
     */
    public final TableField<TeamMealInfoRecord, BigDecimal> MEAL_DISCOUNT_PRICE = createField(DSL.name("meal_discount_price"), SQLDataType.DECIMAL(13, 4).defaultValue(DSL.inline("-1.0000", SQLDataType.DECIMAL)), this, "套餐折扣价");

    private TeamMealInfo(Name alias, Table<TeamMealInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamMealInfo(Name alias, Table<TeamMealInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("团队套餐信息"), TableOptions.table());
    }

    /**
     * Create an aliased <code>physical_examination_system.team_meal_info</code> table reference
     */
    public TeamMealInfo(String alias) {
        this(DSL.name(alias), TEAM_MEAL_INFO);
    }

    /**
     * Create an aliased <code>physical_examination_system.team_meal_info</code> table reference
     */
    public TeamMealInfo(Name alias) {
        this(alias, TEAM_MEAL_INFO);
    }

    /**
     * Create a <code>physical_examination_system.team_meal_info</code> table reference
     */
    public TeamMealInfo() {
        this(DSL.name("team_meal_info"), null);
    }

    public <O extends Record> TeamMealInfo(Table<O> child, ForeignKey<O, TeamMealInfoRecord> key) {
        super(child, key, TEAM_MEAL_INFO);
    }

    @Override
    public Schema getSchema() {
        return PhysicalExaminationSystem.PHYSICAL_EXAMINATION_SYSTEM;
    }

    @Override
    public Identity<TeamMealInfoRecord, Long> getIdentity() {
        return (Identity<TeamMealInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TeamMealInfoRecord> getPrimaryKey() {
        return Keys.KEY_TEAM_MEAL_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeamMealInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamMealInfoRecord>>asList(Keys.KEY_TEAM_MEAL_INFO_PRIMARY);
    }

    @Override
    public TeamMealInfo as(String alias) {
        return new TeamMealInfo(DSL.name(alias), this);
    }

    @Override
    public TeamMealInfo as(Name alias) {
        return new TeamMealInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamMealInfo rename(String name) {
        return new TeamMealInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamMealInfo rename(Name name) {
        return new TeamMealInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, LocalDateTime, LocalDateTime, String, String, Integer, Long, String, Long, String, String, Long, String, String, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
